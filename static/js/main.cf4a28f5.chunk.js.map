{"version":3,"sources":["Timer.js","index.js","assets/tomato.svg"],"names":["React","require","SvgPlay","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","SvgPause","Timer","props","startTimer","setState","timerOn","timer","setInterval","newTime","state","timerTime","timerState","settingRounds","currentRound","roundsBeforeLongBreakInitial","prevState","timerLongRestInitial","alert","timerShortRestInitial","timerInitial","stopTimer","clearInterval","resetTimer","timerStart","adjustTimer","input","totalStudyRoundsGoal","this","seconds","Math","floor","slice","minutes","studyLength","shortRestLength","longRestLength","round","roundPerSession","goal","className","src","Tomato","onClick","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cf4a28f5.chunk.js","sourcesContent":["import \"./index.css\";\nimport Tomato from \"./assets/tomato.svg\";\nconst React = require('react');\n\nconst SvgPlay = () => (\n    <svg width=\"75\" height=\"75\" viewBox=\"0 0 75 75\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M37.5 6.25C20.25 6.25 6.25 20.25 6.25 37.5C6.25 54.75 20.25 68.75 37.5 68.75C54.75 68.75 68.75 54.75 68.75 37.5C68.75 20.25 54.75 6.25 37.5 6.25ZM31.25 51.5625L50 37.5L31.25 23.4375V51.5625ZM12.5 37.5C12.5 51.2812 23.7188 62.5 37.5 62.5C51.2812 62.5 62.5 51.2812 62.5 37.5C62.5 23.7188 51.2812 12.5 37.5 12.5C23.7188 12.5 12.5 23.7188 12.5 37.5Z\" fill=\"#FFF9F9\"/>\n    </svg>\n\n);\nconst SvgPause = () => (\n    <svg width=\"75\" height=\"75\" viewBox=\"0 0 75 75\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M6.25 37.5C6.25 20.25 20.25 6.25 37.5 6.25C54.75 6.25 68.75 20.25 68.75 37.5C68.75 54.75 54.75 68.75 37.5 68.75C20.25 68.75 6.25 54.75 6.25 37.5ZM34.375 50H28.125V25H34.375V50ZM37.5 62.5C23.7188 62.5 12.5 51.2812 12.5 37.5C12.5 23.7188 23.7188 12.5 37.5 12.5C51.2812 12.5 62.5 23.7188 62.5 37.5C62.5 51.2812 51.2812 62.5 37.5 62.5ZM46.875 50H40.625V25H46.875V50Z\" fill=\"white\"/>\n    </svg>\n\n);\n\nclass Timer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            timerOn: false,\n            timerStart: 0,\n            timerTime: 1500000,\n            timerInitial: 1500000,\n            timerShortRestInitial:300000,\n            timerLongRestInitial:300000,\n            timerState: 'study',\n            settingRounds: {\n                currentRound: 0,\n                roundsBeforeLongBreakInitial: 4,\n                totalStudyRoundsGoal: 12\n            }\n        };\n    }\n    startTimer = () => {\n        this.setState({\n            timerOn: true\n        });\n        this.timer = setInterval(() => {\n            const newTime = this.state.timerTime- 1000;\n            if (newTime >= 0) {\n                this.setState({\n                    timerTime: newTime\n                });\n            } else {\n                if (this.state.timerState === 'study') {\n                    if (this.state.settingRounds.currentRound % this.state.settingRounds.roundsBeforeLongBreakInitial\n                    === 3) {\n                        this.setState(prevState =>({\n                            timerState: \"longBreak\",\n                            timerTime: this.state.timerLongRestInitial,\n                            settingRounds : {\n                                ...prevState.settingRounds,\n                                currentRound: this.state.settingRounds.currentRound + 1\n                            }\n                        }));\n                        alert(\"Break Time\");\n                    } else {\n                        this.setState(prevState=>({\n                            timerState: \"shortRest\",\n                            timerTime: this.state.timerShortRestInitial,\n                            settingRounds : {\n                                ...prevState.settingRounds,\n                                currentRound: this.state.settingRounds.currentRound + 1\n                            }\n                        }));\n                        alert(\"Break Time\");\n                    }\n                } else {\n                    this.setState({\n                        timerState: 'study',\n                        timerTime: this.state.timerInitial\n                    });\n                    alert(\"Back to Work\");\n                }\n            }\n        },1000)\n    };\n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false });\n    };\n    resetTimer = () => {\n        if (this.state.timerOn === false) {\n            this.setState({\n                timerTime: this.state.timerStart\n            });\n        }\n    };\n    adjustTimer = (input, state) => {\n        const { timerState, timerTime, timerOn, timerInitial, timerShortRestInitial, timerLongRestInitial } = this.state;\n        const max = 216000000;\n            if (state === \"study\" && (!timerOn || timerState !== 'study')) {\n                // if (input === \"incHours\" && timerTime + 3600000 < max) {\n                //     this.setState({timerInitial: timerInitial + 3600000});\n                // } else if (input === \"decHours\" && timerInitial - 3600000 >= 0) {\n                //     this.setState({timerInitial: timerInitial - 3600000});\n                // } else\n                if (input === \"incMinutes\" && timerInitial + 60000 < max) {\n                    this.setState(\n                        {\n                            timerInitial: timerInitial + 60000,\n                        });\n                    if (timerState ==='study') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerInitial + 60000,\n                                timerStart: this.state.timerInitial + 60000\n                            });\n                    }\n                } else if (input === \"decMinutes\" && timerInitial - 60000 >= 0) {\n                    this.setState({\n                        timerInitial: timerInitial - 60000,\n                    });\n                    if (timerState ==='study') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerInitial - 60000,\n                                timerStart: this.state.timerInitial - 60000\n                            });\n                    }\n\n                }\n                // } else if (input === \"incSeconds\" && timerInitial + 1000 < max) {\n                //     this.setState({timerInitial: timerInitial + 1000});\n                // } else if (input === \"decSeconds\" && timerInitial - 1000 >= 0) {\n                //     this.setState({timerInitial: timerInitial - 1000});\n                // }\n            } else if (state === \"shortRest\" && (!timerOn || timerState !== 'shortRest')) {\n                if (input === \"incMinutes\" && timerShortRestInitial + 60000 < max) {\n                    this.setState(\n                        {\n                            timerShortRestInitial: timerShortRestInitial + 60000,\n                        });\n                    if (timerState ==='shortRest') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerShortRestInitial + 60000,\n                                timerStart: this.state.timerShortRestInitial + 60000\n                            });\n                    }\n                } else if (input === \"decMinutes\" && timerShortRestInitial - 60000 >= 0) {\n                    this.setState({\n                        timerShortRestInitial: timerShortRestInitial - 60000,\n                    });\n                    if (timerState ==='shortRest') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerShortRestInitial - 60000,\n                                timerStart: this.state.timerShortRestInitial - 60000\n                            });\n                    }\n                }\n            } else if (state === \"longRest\" && (!timerOn || timerState !== \"longRest\" )) {\n                if (input === \"incMinutes\" && timerLongRestInitial + 60000 < max) {\n                    this.setState(\n                        {\n                            timerLongRestInitial: timerLongRestInitial + 60000,\n                        });\n\n                    if (timerState ==='longRest') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerLongRestInitial + 60000,\n                                timerStart: this.state.timerLongRestInitial + 60000\n                            });\n                    }\n                } else if (input === \"decMinutes\" && timerLongRestInitial - 60000 >= 0) {\n                    this.setState({\n                        timerLongRestInitial: timerLongRestInitial - 60000,\n                    });\n                    if (timerState ==='longRest') {\n                        this.setState(\n                            {\n                                timerTime: this.state.timerLongRestInitial - 60000,\n                                timerStart: this.state.timerLongRestInitial - 60000\n                            });\n                    }\n                }\n            } else if (state === \"round\") {\n                if (input === \"incRound\") {\n                    this.setState(prevState => ({\n                        settingRounds :{\n                            ...prevState.settingRounds,\n                            roundsBeforeLongBreakInitial: this.state.settingRounds.roundsBeforeLongBreakInitial + 1\n                        }\n                    }))\n                } else {\n                    this.setState(prevState => ({\n                        settingRounds :{\n                            ...prevState.settingRounds,\n                            roundsBeforeLongBreakInitial: this.state.settingRounds.roundsBeforeLongBreakInitial - 1\n                        }\n                    }))\n                }\n            } else if (state === \"goal\") {\n                if (input === \"incGoal\") {\n                    this.setState(prevState => ({\n                        settingRounds :{\n                            ...prevState.settingRounds,\n                            totalStudyRoundsGoal: this.state.settingRounds.totalStudyRoundsGoal + 1\n                        }\n                    }))\n                } else {\n                    this.setState(prevState => ({\n                        settingRounds :{\n                            ...prevState.settingRounds,\n                            totalStudyRoundsGoal: this.state.settingRounds.totalStudyRoundsGoal - 1\n                        }\n                    }))\n                }\n            }\n    };\n\n    render() {\n        const { timerTime, timerStart, timerOn, timerInitial, timerShortRestInitial, timerLongRestInitial, settingRounds } = this.state;\n        let seconds = (\"0\" + (Math.floor((timerTime/ 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((timerTime/ 60000) % 60)).slice(-2);\n\n        let studyLength = (\"0\" + Math.floor((timerInitial/ 60000) % 60)).slice(-2);\n        let shortRestLength = (\"0\" + Math.floor((timerShortRestInitial/ 60000) % 60)).slice(-2 );\n        let longRestLength = (\"0\" + Math.floor((timerLongRestInitial/ 60000) % 60)).slice(-2 );\n\n        let round = settingRounds.currentRound % settingRounds.roundsBeforeLongBreakInitial;\n        let roundPerSession = settingRounds.roundsBeforeLongBreakInitial;\n        let currentRound = settingRounds.currentRound;\n        let goal = settingRounds.totalStudyRoundsGoal;\n        return (\n            <div className=\"Countdown-timer\">\n                <div className=\"container\">\n                    <img className=\"tomato-img\" src={Tomato}/>\n                    <div className=\"Countdown-time\">\n                        {minutes} : {seconds}\n                    </div>\n                    {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n                        <button className=\"Button-start\" onClick={this.startTimer}>\n                            <SvgPlay className=\"SvgPlay\"/>\n                        </button>\n                    )}\n                    {timerOn === true && timerTime >= 1000 && (\n                        <button className=\"Button-stop\" onClick={this.stopTimer}>\n                            <SvgPause/>\n                        </button>\n                    )}\n                    {timerOn === false &&\n                    (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                        <button className=\"Button-start\" onClick={this.startTimer}>\n                            <SvgPlay className=\"SvgPlay\"/>\n                        </button>\n                    )}\n                </div>\n\n                <div className=\"goal-setting\">\n                    <div className=\"adjustTime\">\n                        <p> Round: </p>\n                        <div>{round}</div>\n                        <div className=\"adjustTimeContainer\">\n                            <button onClick={() => this.adjustTimer(\"incRound\", \"round\")}>&#8679;</button>\n                            <div className=\"setTime\">{roundPerSession} </div>\n                            <button onClick={() => this.adjustTimer(\"decRound\",  \"round\")}>&#8681;</button>\n                        </div>\n                    </div>\n                    <div className=\"adjustTime\">\n                        <p> Goal: </p>\n                        <div>{currentRound}</div>\n                        <div className=\"adjustTimeContainer\">\n                            <button onClick={() => this.adjustTimer(\"incGoal\", \"goal\")}>&#8679;</button>\n                            <div className=\"setTime\">{goal} </div>\n                            <button onClick={() => this.adjustTimer(\"decGoal\", \"goal\")}>&#8681;</button>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className=\"adjustTime\">\n                        <p> Focus Length: </p>\n                        <div className=\"adjustTimeContainer\">\n                            <button onClick={() => this.adjustTimer(\"incMinutes\", \"study\")}>&#8679;</button>\n                            <div className=\"setTime\">{studyLength} </div>\n                            <button onClick={() => this.adjustTimer(\"decMinutes\", \"study\")}>&#8681;</button>\n                        </div>\n                        <p> mins </p>\n                    </div>\n                    <div className=\"adjustTime\">\n                        <p>Short Break Length: </p>\n                        <div className=\"adjustTimeContainer\">\n                            <button onClick={() => this.adjustTimer(\"incMinutes\", \"shortRest\")}>&#8679;</button>\n                            <div className=\"setTime\">{shortRestLength} </div>\n                            <button onClick={() => this.adjustTimer(\"decMinutes\", \"shortRest\")}>&#8681;</button>\n                        </div>\n                        <p> mins </p>\n                    </div>\n                    <div className=\"adjustTime\">\n                        <p>Long Break Length: </p>\n                        <div className=\"adjustTimeContainer\">\n                            <button onClick={() => this.adjustTimer(\"incMinutes\", \"longRest\")}>&#8679;</button>\n                            <div className=\"setTime\">{longRestLength} </div>\n                            <button onClick={() => this.adjustTimer(\"decMinutes\", \"longRest\")}>&#8681;</button>\n                        </div>\n                        <p> mins </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Timer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './Timer';\n\nReactDOM.render(<Timer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n","module.exports = __webpack_public_path__ + \"static/media/tomato.43b8d7ed.svg\";"],"sourceRoot":""}